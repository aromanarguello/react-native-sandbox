de9657852a9e32ed5af77ac5aa86e76e
'use strict';

var React = require('react');

var StyleSheet = require("../../StyleSheet/StyleSheet");

var Text = require("../../Text/Text");

var YellowBoxPressable = require("./YellowBoxPressable");

var YellowBoxStyle = require("./YellowBoxStyle");

var YellowBoxInspectorStackFrame = function YellowBoxInspectorStackFrame(props) {
  var frame = props.frame,
      onPress = props.onPress;
  return React.createElement(YellowBoxPressable, {
    backgroundColor: {
      default: YellowBoxStyle.getBackgroundColor(0),
      pressed: YellowBoxStyle.getHighlightColor(1)
    },
    onPress: onPress,
    style: styles.frame
  }, React.createElement(Text, {
    style: styles.frameName
  }, frame.methodName), React.createElement(Text, {
    ellipsizeMode: "middle",
    numberOfLines: 1,
    style: styles.frameLocation
  }, getFrameLocation(frame.file) + ":" + frame.lineNumber + (frame.column == null ? '' : ':' + frame.column)));
};

var getFrameLocation = function getFrameLocation(uri) {
  var queryIndex = uri.indexOf('?');
  var query = queryIndex < 0 ? '' : uri.substr(queryIndex);
  var path = queryIndex < 0 ? uri : uri.substr(0, queryIndex);
  var file = path.substr(path.lastIndexOf('/') + 1);
  return file + query;
};

var styles = StyleSheet.create({
  frame: {
    paddingHorizontal: 12,
    paddingVertical: 4
  },
  frameName: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18
  },
  frameLocation: {
    color: YellowBoxStyle.getTextColor(0.7),
    fontSize: 12,
    fontWeight: '300',
    includeFontPadding: false,
    lineHeight: 16
  }
});
module.exports = YellowBoxInspectorStackFrame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiU3R5bGVTaGVldCIsIlRleHQiLCJZZWxsb3dCb3hQcmVzc2FibGUiLCJZZWxsb3dCb3hTdHlsZSIsIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUiLCJwcm9wcyIsImZyYW1lIiwib25QcmVzcyIsImRlZmF1bHQiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJwcmVzc2VkIiwiZ2V0SGlnaGxpZ2h0Q29sb3IiLCJzdHlsZXMiLCJmcmFtZU5hbWUiLCJtZXRob2ROYW1lIiwiZnJhbWVMb2NhdGlvbiIsImdldEZyYW1lTG9jYXRpb24iLCJmaWxlIiwibGluZU51bWJlciIsImNvbHVtbiIsInVyaSIsInF1ZXJ5SW5kZXgiLCJpbmRleE9mIiwicXVlcnkiLCJzdWJzdHIiLCJwYXRoIiwibGFzdEluZGV4T2YiLCJjcmVhdGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdWZXJ0aWNhbCIsImNvbG9yIiwiZ2V0VGV4dENvbG9yIiwiZm9udFNpemUiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJsaW5lSGVpZ2h0IiwiZm9udFdlaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUMsVUFBVSxHQUFHRCxPQUFPLCtCQUExQjs7QUFDQSxJQUFNRSxJQUFJLEdBQUdGLE9BQU8sbUJBQXBCOztBQUNBLElBQU1HLGtCQUFrQixHQUFHSCxPQUFPLHdCQUFsQzs7QUFDQSxJQUFNSSxjQUFjLEdBQUdKLE9BQU8sb0JBQTlCOztBQVVBLElBQU1LLDRCQUE0QixHQUFHLFNBQS9CQSw0QkFBK0IsQ0FBQ0MsS0FBRCxFQUE4QjtBQUFBLE1BQzFEQyxLQUQwRCxHQUN4Q0QsS0FEd0MsQ0FDMURDLEtBRDBEO0FBQUEsTUFDbkRDLE9BRG1ELEdBQ3hDRixLQUR3QyxDQUNuREUsT0FEbUQ7QUFHakUsU0FDRSxvQkFBQyxrQkFBRDtBQUNFLElBQUEsZUFBZSxFQUFFO0FBQ2ZDLE1BQUFBLE9BQU8sRUFBRUwsY0FBYyxDQUFDTSxrQkFBZixDQUFrQyxDQUFsQyxDQURNO0FBRWZDLE1BQUFBLE9BQU8sRUFBRVAsY0FBYyxDQUFDUSxpQkFBZixDQUFpQyxDQUFqQztBQUZNLEtBRG5CO0FBS0UsSUFBQSxPQUFPLEVBQUVKLE9BTFg7QUFNRSxJQUFBLEtBQUssRUFBRUssTUFBTSxDQUFDTjtBQU5oQixLQU9FLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRU0sTUFBTSxDQUFDQztBQUFwQixLQUFnQ1AsS0FBSyxDQUFDUSxVQUF0QyxDQVBGLEVBUUUsb0JBQUMsSUFBRDtBQUNFLElBQUEsYUFBYSxFQUFDLFFBRGhCO0FBRUUsSUFBQSxhQUFhLEVBQUUsQ0FGakI7QUFHRSxJQUFBLEtBQUssRUFBRUYsTUFBTSxDQUFDRztBQUhoQixLQUlNQyxnQkFBZ0IsQ0FBQ1YsS0FBSyxDQUFDVyxJQUFQLENBSnRCLFNBSXNDWCxLQUFLLENBQUNZLFVBSjVDLElBS0laLEtBQUssQ0FBQ2EsTUFBTixJQUFnQixJQUFoQixHQUF1QixFQUF2QixHQUE0QixNQUFNYixLQUFLLENBQUNhLE1BTDVDLEVBUkYsQ0FERjtBQW1CRCxDQXRCRDs7QUF3QkEsSUFBTUgsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDSSxHQUFELEVBQXlCO0FBQ2hELE1BQU1DLFVBQVUsR0FBR0QsR0FBRyxDQUFDRSxPQUFKLENBQVksR0FBWixDQUFuQjtBQUNBLE1BQU1DLEtBQUssR0FBR0YsVUFBVSxHQUFHLENBQWIsR0FBaUIsRUFBakIsR0FBc0JELEdBQUcsQ0FBQ0ksTUFBSixDQUFXSCxVQUFYLENBQXBDO0FBRUEsTUFBTUksSUFBSSxHQUFHSixVQUFVLEdBQUcsQ0FBYixHQUFpQkQsR0FBakIsR0FBdUJBLEdBQUcsQ0FBQ0ksTUFBSixDQUFXLENBQVgsRUFBY0gsVUFBZCxDQUFwQztBQUNBLE1BQU1KLElBQUksR0FBR1EsSUFBSSxDQUFDRCxNQUFMLENBQVlDLElBQUksQ0FBQ0MsV0FBTCxDQUFpQixHQUFqQixJQUF3QixDQUFwQyxDQUFiO0FBRUEsU0FBT1QsSUFBSSxHQUFHTSxLQUFkO0FBQ0QsQ0FSRDs7QUFVQSxJQUFNWCxNQUFNLEdBQUdaLFVBQVUsQ0FBQzJCLE1BQVgsQ0FBa0I7QUFDL0JyQixFQUFBQSxLQUFLLEVBQUU7QUFDTHNCLElBQUFBLGlCQUFpQixFQUFFLEVBRGQ7QUFFTEMsSUFBQUEsZUFBZSxFQUFFO0FBRlosR0FEd0I7QUFLL0JoQixFQUFBQSxTQUFTLEVBQUU7QUFDVGlCLElBQUFBLEtBQUssRUFBRTNCLGNBQWMsQ0FBQzRCLFlBQWYsQ0FBNEIsQ0FBNUIsQ0FERTtBQUVUQyxJQUFBQSxRQUFRLEVBQUUsRUFGRDtBQUdUQyxJQUFBQSxrQkFBa0IsRUFBRSxLQUhYO0FBSVRDLElBQUFBLFVBQVUsRUFBRTtBQUpILEdBTG9CO0FBVy9CbkIsRUFBQUEsYUFBYSxFQUFFO0FBQ2JlLElBQUFBLEtBQUssRUFBRTNCLGNBQWMsQ0FBQzRCLFlBQWYsQ0FBNEIsR0FBNUIsQ0FETTtBQUViQyxJQUFBQSxRQUFRLEVBQUUsRUFGRztBQUdiRyxJQUFBQSxVQUFVLEVBQUUsS0FIQztBQUliRixJQUFBQSxrQkFBa0IsRUFBRSxLQUpQO0FBS2JDLElBQUFBLFVBQVUsRUFBRTtBQUxDO0FBWGdCLENBQWxCLENBQWY7QUFvQkFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpDLDRCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0Jyk7XG5jb25zdCBUZXh0ID0gcmVxdWlyZSgnLi4vLi4vVGV4dC9UZXh0Jyk7XG5jb25zdCBZZWxsb3dCb3hQcmVzc2FibGUgPSByZXF1aXJlKCcuL1llbGxvd0JveFByZXNzYWJsZScpO1xuY29uc3QgWWVsbG93Qm94U3R5bGUgPSByZXF1aXJlKCcuL1llbGxvd0JveFN0eWxlJyk7XG5cbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICcuLi8uLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7U3RhY2tGcmFtZX0gZnJvbSAnLi4vLi4vQ29yZS9EZXZ0b29scy9wYXJzZUVycm9yU3RhY2snO1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIGZyYW1lOiBTdGFja0ZyYW1lLFxuICBvblByZXNzPzogPyhldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbnx9PjtcblxuY29uc3QgWWVsbG93Qm94SW5zcGVjdG9yU3RhY2tGcmFtZSA9IChwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlID0+IHtcbiAgY29uc3Qge2ZyYW1lLCBvblByZXNzfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPFllbGxvd0JveFByZXNzYWJsZVxuICAgICAgYmFja2dyb3VuZENvbG9yPXt7XG4gICAgICAgIGRlZmF1bHQ6IFllbGxvd0JveFN0eWxlLmdldEJhY2tncm91bmRDb2xvcigwKSxcbiAgICAgICAgcHJlc3NlZDogWWVsbG93Qm94U3R5bGUuZ2V0SGlnaGxpZ2h0Q29sb3IoMSksXG4gICAgICB9fVxuICAgICAgb25QcmVzcz17b25QcmVzc31cbiAgICAgIHN0eWxlPXtzdHlsZXMuZnJhbWV9PlxuICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5mcmFtZU5hbWV9PntmcmFtZS5tZXRob2ROYW1lfTwvVGV4dD5cbiAgICAgIDxUZXh0XG4gICAgICAgIGVsbGlwc2l6ZU1vZGU9XCJtaWRkbGVcIlxuICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgICBzdHlsZT17c3R5bGVzLmZyYW1lTG9jYXRpb259PlxuICAgICAgICB7YCR7Z2V0RnJhbWVMb2NhdGlvbihmcmFtZS5maWxlKX06JHtmcmFtZS5saW5lTnVtYmVyfSR7XG4gICAgICAgICAgZnJhbWUuY29sdW1uID09IG51bGwgPyAnJyA6ICc6JyArIGZyYW1lLmNvbHVtblxuICAgICAgICB9YH1cbiAgICAgIDwvVGV4dD5cbiAgICA8L1llbGxvd0JveFByZXNzYWJsZT5cbiAgKTtcbn07XG5cbmNvbnN0IGdldEZyYW1lTG9jYXRpb24gPSAodXJpOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBxdWVyeUluZGV4ID0gdXJpLmluZGV4T2YoJz8nKTtcbiAgY29uc3QgcXVlcnkgPSBxdWVyeUluZGV4IDwgMCA/ICcnIDogdXJpLnN1YnN0cihxdWVyeUluZGV4KTtcblxuICBjb25zdCBwYXRoID0gcXVlcnlJbmRleCA8IDAgPyB1cmkgOiB1cmkuc3Vic3RyKDAsIHF1ZXJ5SW5kZXgpO1xuICBjb25zdCBmaWxlID0gcGF0aC5zdWJzdHIocGF0aC5sYXN0SW5kZXhPZignLycpICsgMSk7XG5cbiAgcmV0dXJuIGZpbGUgKyBxdWVyeTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgZnJhbWU6IHtcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTIsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiA0LFxuICB9LFxuICBmcmFtZU5hbWU6IHtcbiAgICBjb2xvcjogWWVsbG93Qm94U3R5bGUuZ2V0VGV4dENvbG9yKDEpLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBpbmNsdWRlRm9udFBhZGRpbmc6IGZhbHNlLFxuICAgIGxpbmVIZWlnaHQ6IDE4LFxuICB9LFxuICBmcmFtZUxvY2F0aW9uOiB7XG4gICAgY29sb3I6IFllbGxvd0JveFN0eWxlLmdldFRleHRDb2xvcigwLjcpLFxuICAgIGZvbnRTaXplOiAxMixcbiAgICBmb250V2VpZ2h0OiAnMzAwJyxcbiAgICBpbmNsdWRlRm9udFBhZGRpbmc6IGZhbHNlLFxuICAgIGxpbmVIZWlnaHQ6IDE2LFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gWWVsbG93Qm94SW5zcGVjdG9yU3RhY2tGcmFtZTtcbiJdfQ==