4aee5d924fcfd133b08d83b8ff5e30b5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _Platform = _interopRequireDefault(require("../Utilities/Platform"));

var UIManager = require("../ReactNative/UIManager");

function configureNext(config, onAnimationDidEnd) {
  if (!_Platform.default.isTesting) {
    var _onAnimationDidEnd;

    UIManager.configureNextLayoutAnimation(config, (_onAnimationDidEnd = onAnimationDidEnd) != null ? _onAnimationDidEnd : function () {}, function () {});
  }
}

function create(duration, type, property) {
  return {
    duration: duration,
    create: {
      type: type,
      property: property
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: property
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
  linear: create(500, 'linear', 'opacity'),
  spring: {
    duration: 700,
    create: {
      type: 'linear',
      property: 'opacity'
    },
    update: {
      type: 'spring',
      springDamping: 0.4
    },
    delete: {
      type: 'linear',
      property: 'opacity'
    }
  }
};
var LayoutAnimation = {
  configureNext: configureNext,
  create: create,
  Types: Object.freeze({
    spring: 'spring',
    linear: 'linear',
    easeInEaseOut: 'easeInEaseOut',
    easeIn: 'easeIn',
    easeOut: 'easeOut',
    keyboard: 'keyboard'
  }),
  Properties: Object.freeze({
    opacity: 'opacity',
    scaleX: 'scaleX',
    scaleY: 'scaleY',
    scaleXY: 'scaleXY'
  }),
  checkConfig: function checkConfig() {
    console.error('LayoutAnimation.checkConfig(...) has been disabled.');
  },
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};
module.exports = LayoutAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxheW91dEFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJVSU1hbmFnZXIiLCJyZXF1aXJlIiwiY29uZmlndXJlTmV4dCIsImNvbmZpZyIsIm9uQW5pbWF0aW9uRGlkRW5kIiwiUGxhdGZvcm0iLCJpc1Rlc3RpbmciLCJjb25maWd1cmVOZXh0TGF5b3V0QW5pbWF0aW9uIiwiY3JlYXRlIiwiZHVyYXRpb24iLCJ0eXBlIiwicHJvcGVydHkiLCJ1cGRhdGUiLCJkZWxldGUiLCJQcmVzZXRzIiwiZWFzZUluRWFzZU91dCIsImxpbmVhciIsInNwcmluZyIsInNwcmluZ0RhbXBpbmciLCJMYXlvdXRBbmltYXRpb24iLCJUeXBlcyIsIk9iamVjdCIsImZyZWV6ZSIsImVhc2VJbiIsImVhc2VPdXQiLCJrZXlib2FyZCIsIlByb3BlcnRpZXMiLCJvcGFjaXR5Iiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGVYWSIsImNoZWNrQ29uZmlnIiwiY29uc29sZSIsImVycm9yIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7O0FBRUE7O0FBQ0EsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLDRCQUF6Qjs7QUE0QkEsU0FBU0MsYUFBVCxDQUNFQyxNQURGLEVBRUVDLGlCQUZGLEVBR0U7QUFDQSxNQUFJLENBQUNDLGtCQUFTQyxTQUFkLEVBQXlCO0FBQUE7O0FBQ3ZCTixJQUFBQSxTQUFTLENBQUNPLDRCQUFWLENBQ0VKLE1BREYsd0JBRUVDLGlCQUZGLGlDQUV1QixZQUFXLENBQUUsQ0FGcEMsRUFHRSxZQUFXLENBRVYsQ0FMSDtBQU9EO0FBQ0Y7O0FBRUQsU0FBU0ksTUFBVCxDQUNFQyxRQURGLEVBRUVDLElBRkYsRUFHRUMsUUFIRixFQUl5QjtBQUN2QixTQUFPO0FBQ0xGLElBQUFBLFFBQVEsRUFBUkEsUUFESztBQUVMRCxJQUFBQSxNQUFNLEVBQUU7QUFBQ0UsTUFBQUEsSUFBSSxFQUFKQSxJQUFEO0FBQU9DLE1BQUFBLFFBQVEsRUFBUkE7QUFBUCxLQUZIO0FBR0xDLElBQUFBLE1BQU0sRUFBRTtBQUFDRixNQUFBQSxJQUFJLEVBQUpBO0FBQUQsS0FISDtBQUlMRyxJQUFBQSxNQUFNLEVBQUU7QUFBQ0gsTUFBQUEsSUFBSSxFQUFKQSxJQUFEO0FBQU9DLE1BQUFBLFFBQVEsRUFBUkE7QUFBUDtBQUpILEdBQVA7QUFNRDs7QUFFRCxJQUFNRyxPQUFPLEdBQUc7QUFDZEMsRUFBQUEsYUFBYSxFQUFFUCxNQUFNLENBQUMsR0FBRCxFQUFNLGVBQU4sRUFBdUIsU0FBdkIsQ0FEUDtBQUVkUSxFQUFBQSxNQUFNLEVBQUVSLE1BQU0sQ0FBQyxHQUFELEVBQU0sUUFBTixFQUFnQixTQUFoQixDQUZBO0FBR2RTLEVBQUFBLE1BQU0sRUFBRTtBQUNOUixJQUFBQSxRQUFRLEVBQUUsR0FESjtBQUVORCxJQUFBQSxNQUFNLEVBQUU7QUFDTkUsTUFBQUEsSUFBSSxFQUFFLFFBREE7QUFFTkMsTUFBQUEsUUFBUSxFQUFFO0FBRkosS0FGRjtBQU1OQyxJQUFBQSxNQUFNLEVBQUU7QUFDTkYsTUFBQUEsSUFBSSxFQUFFLFFBREE7QUFFTlEsTUFBQUEsYUFBYSxFQUFFO0FBRlQsS0FORjtBQVVOTCxJQUFBQSxNQUFNLEVBQUU7QUFDTkgsTUFBQUEsSUFBSSxFQUFFLFFBREE7QUFFTkMsTUFBQUEsUUFBUSxFQUFFO0FBRko7QUFWRjtBQUhNLENBQWhCO0FBOEJBLElBQU1RLGVBQWUsR0FBRztBQWN0QmpCLEVBQUFBLGFBQWEsRUFBYkEsYUFkc0I7QUFrQnRCTSxFQUFBQSxNQUFNLEVBQU5BLE1BbEJzQjtBQW1CdEJZLEVBQUFBLEtBQUssRUFBRUMsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDbkJMLElBQUFBLE1BQU0sRUFBRSxRQURXO0FBRW5CRCxJQUFBQSxNQUFNLEVBQUUsUUFGVztBQUduQkQsSUFBQUEsYUFBYSxFQUFFLGVBSEk7QUFJbkJRLElBQUFBLE1BQU0sRUFBRSxRQUpXO0FBS25CQyxJQUFBQSxPQUFPLEVBQUUsU0FMVTtBQU1uQkMsSUFBQUEsUUFBUSxFQUFFO0FBTlMsR0FBZCxDQW5CZTtBQTJCdEJDLEVBQUFBLFVBQVUsRUFBRUwsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDeEJLLElBQUFBLE9BQU8sRUFBRSxTQURlO0FBRXhCQyxJQUFBQSxNQUFNLEVBQUUsUUFGZ0I7QUFHeEJDLElBQUFBLE1BQU0sRUFBRSxRQUhnQjtBQUl4QkMsSUFBQUEsT0FBTyxFQUFFO0FBSmUsR0FBZCxDQTNCVTtBQWlDdEJDLEVBQUFBLFdBakNzQix5QkFpQ2E7QUFDakNDLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLHFEQUFkO0FBQ0QsR0FuQ3FCO0FBb0N0Qm5CLEVBQUFBLE9BQU8sRUFBUEEsT0FwQ3NCO0FBcUN0QkMsRUFBQUEsYUFBYSxFQUFFYixhQUFhLENBQUNnQyxJQUFkLENBQW1CLElBQW5CLEVBQXlCcEIsT0FBTyxDQUFDQyxhQUFqQyxDQXJDTztBQXNDdEJDLEVBQUFBLE1BQU0sRUFBRWQsYUFBYSxDQUFDZ0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QnBCLE9BQU8sQ0FBQ0UsTUFBakMsQ0F0Q2M7QUF1Q3RCQyxFQUFBQSxNQUFNLEVBQUVmLGFBQWEsQ0FBQ2dDLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUJwQixPQUFPLENBQUNHLE1BQWpDO0FBdkNjLENBQXhCO0FBMENBa0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcicpO1xuXG50eXBlIFR5cGUgPVxuICB8ICdzcHJpbmcnXG4gIHwgJ2xpbmVhcidcbiAgfCAnZWFzZUluRWFzZU91dCdcbiAgfCAnZWFzZUluJ1xuICB8ICdlYXNlT3V0J1xuICB8ICdrZXlib2FyZCc7XG5cbnR5cGUgUHJvcGVydHkgPSAnb3BhY2l0eScgfCAnc2NhbGVYJyB8ICdzY2FsZVknIHwgJ3NjYWxlWFknO1xuXG50eXBlIEFuaW1hdGlvbkNvbmZpZyA9ICRSZWFkT25seTx7fFxuICBkdXJhdGlvbj86IG51bWJlcixcbiAgZGVsYXk/OiBudW1iZXIsXG4gIHNwcmluZ0RhbXBpbmc/OiBudW1iZXIsXG4gIGluaXRpYWxWZWxvY2l0eT86IG51bWJlcixcbiAgdHlwZT86IFR5cGUsXG4gIHByb3BlcnR5PzogUHJvcGVydHksXG58fT47XG5cbnR5cGUgTGF5b3V0QW5pbWF0aW9uQ29uZmlnID0gJFJlYWRPbmx5PHt8XG4gIGR1cmF0aW9uOiBudW1iZXIsXG4gIGNyZWF0ZT86IEFuaW1hdGlvbkNvbmZpZyxcbiAgdXBkYXRlPzogQW5pbWF0aW9uQ29uZmlnLFxuICBkZWxldGU/OiBBbmltYXRpb25Db25maWcsXG58fT47XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZU5leHQoXG4gIGNvbmZpZzogTGF5b3V0QW5pbWF0aW9uQ29uZmlnLFxuICBvbkFuaW1hdGlvbkRpZEVuZD86IEZ1bmN0aW9uLFxuKSB7XG4gIGlmICghUGxhdGZvcm0uaXNUZXN0aW5nKSB7XG4gICAgVUlNYW5hZ2VyLmNvbmZpZ3VyZU5leHRMYXlvdXRBbmltYXRpb24oXG4gICAgICBjb25maWcsXG4gICAgICBvbkFuaW1hdGlvbkRpZEVuZCA/PyBmdW5jdGlvbigpIHt9LFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qIHVudXNlZCAqL1xuICAgICAgfSxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShcbiAgZHVyYXRpb246IG51bWJlcixcbiAgdHlwZTogVHlwZSxcbiAgcHJvcGVydHk6IFByb3BlcnR5LFxuKTogTGF5b3V0QW5pbWF0aW9uQ29uZmlnIHtcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbixcbiAgICBjcmVhdGU6IHt0eXBlLCBwcm9wZXJ0eX0sXG4gICAgdXBkYXRlOiB7dHlwZX0sXG4gICAgZGVsZXRlOiB7dHlwZSwgcHJvcGVydHl9LFxuICB9O1xufVxuXG5jb25zdCBQcmVzZXRzID0ge1xuICBlYXNlSW5FYXNlT3V0OiBjcmVhdGUoMzAwLCAnZWFzZUluRWFzZU91dCcsICdvcGFjaXR5JyksXG4gIGxpbmVhcjogY3JlYXRlKDUwMCwgJ2xpbmVhcicsICdvcGFjaXR5JyksXG4gIHNwcmluZzoge1xuICAgIGR1cmF0aW9uOiA3MDAsXG4gICAgY3JlYXRlOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgIHByb3BlcnR5OiAnb3BhY2l0eScsXG4gICAgfSxcbiAgICB1cGRhdGU6IHtcbiAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgc3ByaW5nRGFtcGluZzogMC40LFxuICAgIH0sXG4gICAgZGVsZXRlOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgIHByb3BlcnR5OiAnb3BhY2l0eScsXG4gICAgfSxcbiAgfSxcbn07XG5cbi8qKlxuICogQXV0b21hdGljYWxseSBhbmltYXRlcyB2aWV3cyB0byB0aGVpciBuZXcgcG9zaXRpb25zIHdoZW4gdGhlXG4gKiBuZXh0IGxheW91dCBoYXBwZW5zLlxuICpcbiAqIEEgY29tbW9uIHdheSB0byB1c2UgdGhpcyBBUEkgaXMgdG8gY2FsbCBpdCBiZWZvcmUgY2FsbGluZyBgc2V0U3RhdGVgLlxuICpcbiAqIE5vdGUgdGhhdCBpbiBvcmRlciB0byBnZXQgdGhpcyB0byB3b3JrIG9uICoqQW5kcm9pZCoqIHlvdSBuZWVkIHRvIHNldCB0aGUgZm9sbG93aW5nIGZsYWdzIHZpYSBgVUlNYW5hZ2VyYDpcbiAqXG4gKiAgICAgVUlNYW5hZ2VyLnNldExheW91dEFuaW1hdGlvbkVuYWJsZWRFeHBlcmltZW50YWwgJiYgVUlNYW5hZ2VyLnNldExheW91dEFuaW1hdGlvbkVuYWJsZWRFeHBlcmltZW50YWwodHJ1ZSk7XG4gKi9cbmNvbnN0IExheW91dEFuaW1hdGlvbiA9IHtcbiAgLyoqXG4gICAqIFNjaGVkdWxlcyBhbiBhbmltYXRpb24gdG8gaGFwcGVuIG9uIHRoZSBuZXh0IGxheW91dC5cbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZyBTcGVjaWZpZXMgYW5pbWF0aW9uIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBgZHVyYXRpb25gIGluIG1pbGxpc2Vjb25kc1xuICAgKiAgIC0gYGNyZWF0ZWAsIGBBbmltYXRpb25Db25maWdgIGZvciBhbmltYXRpbmcgaW4gbmV3IHZpZXdzXG4gICAqICAgLSBgdXBkYXRlYCwgYEFuaW1hdGlvbkNvbmZpZ2AgZm9yIGFuaW1hdGluZyB2aWV3cyB0aGF0IGhhdmUgYmVlbiB1cGRhdGVkXG4gICAqXG4gICAqIEBwYXJhbSBvbkFuaW1hdGlvbkRpZEVuZCBDYWxsZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVkLlxuICAgKiBPbmx5IHN1cHBvcnRlZCBvbiBpT1MuXG4gICAqIEBwYXJhbSBvbkVycm9yIENhbGxlZCBvbiBlcnJvci4gT25seSBzdXBwb3J0ZWQgb24gaU9TLlxuICAgKi9cbiAgY29uZmlndXJlTmV4dCxcbiAgLyoqXG4gICAqIEhlbHBlciBmb3IgY3JlYXRpbmcgYSBjb25maWcgZm9yIGBjb25maWd1cmVOZXh0YC5cbiAgICovXG4gIGNyZWF0ZSxcbiAgVHlwZXM6IE9iamVjdC5mcmVlemUoe1xuICAgIHNwcmluZzogJ3NwcmluZycsXG4gICAgbGluZWFyOiAnbGluZWFyJyxcbiAgICBlYXNlSW5FYXNlT3V0OiAnZWFzZUluRWFzZU91dCcsXG4gICAgZWFzZUluOiAnZWFzZUluJyxcbiAgICBlYXNlT3V0OiAnZWFzZU91dCcsXG4gICAga2V5Ym9hcmQ6ICdrZXlib2FyZCcsXG4gIH0pLFxuICBQcm9wZXJ0aWVzOiBPYmplY3QuZnJlZXplKHtcbiAgICBvcGFjaXR5OiAnb3BhY2l0eScsXG4gICAgc2NhbGVYOiAnc2NhbGVYJyxcbiAgICBzY2FsZVk6ICdzY2FsZVknLFxuICAgIHNjYWxlWFk6ICdzY2FsZVhZJyxcbiAgfSksXG4gIGNoZWNrQ29uZmlnKC4uLmFyZ3M6IEFycmF5PG1peGVkPikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xheW91dEFuaW1hdGlvbi5jaGVja0NvbmZpZyguLi4pIGhhcyBiZWVuIGRpc2FibGVkLicpO1xuICB9LFxuICBQcmVzZXRzLFxuICBlYXNlSW5FYXNlT3V0OiBjb25maWd1cmVOZXh0LmJpbmQobnVsbCwgUHJlc2V0cy5lYXNlSW5FYXNlT3V0KSxcbiAgbGluZWFyOiBjb25maWd1cmVOZXh0LmJpbmQobnVsbCwgUHJlc2V0cy5saW5lYXIpLFxuICBzcHJpbmc6IGNvbmZpZ3VyZU5leHQuYmluZChudWxsLCBQcmVzZXRzLnNwcmluZyksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExheW91dEFuaW1hdGlvbjtcbiJdfQ==