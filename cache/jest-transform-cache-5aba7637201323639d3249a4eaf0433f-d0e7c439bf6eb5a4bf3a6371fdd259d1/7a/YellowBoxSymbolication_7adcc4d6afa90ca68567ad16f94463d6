9dece2e3b44caf24ca0d77331d22461b
'use strict';

var symbolicateStackTrace = require("../../Core/Devtools/symbolicateStackTrace");

var cache = new Map();
var YellowBoxSymbolication = {
  delete: function _delete(stack) {
    cache.delete(getCacheKey(stack));
  },
  symbolicate: function symbolicate(stack) {
    var key = getCacheKey(stack);
    var promise = cache.get(key);

    if (promise == null) {
      promise = symbolicateStackTrace(stack).then(sanitize);
      cache.set(key, promise);
    }

    return promise;
  }
};

var getCacheKey = function getCacheKey(stack) {
  return JSON.stringify(stack);
};

var sanitize = function sanitize(maybeStack) {
  if (!Array.isArray(maybeStack)) {
    throw new Error('Expected stack to be an array.');
  }

  var stack = [];

  for (var _iterator = maybeStack, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var _maybeFrame = _ref;

    if (typeof _maybeFrame !== 'object' || _maybeFrame == null) {
      throw new Error('Expected each stack frame to be an object.');
    }

    if (typeof _maybeFrame.column !== 'number' && _maybeFrame.column != null) {
      throw new Error('Expected stack frame `column` to be a nullable number.');
    }

    if (typeof _maybeFrame.file !== 'string') {
      throw new Error('Expected stack frame `file` to be a string.');
    }

    if (typeof _maybeFrame.lineNumber !== 'number') {
      throw new Error('Expected stack frame `lineNumber` to be a number.');
    }

    if (typeof _maybeFrame.methodName !== 'string') {
      throw new Error('Expected stack frame `methodName` to be a string.');
    }

    stack.push({
      column: _maybeFrame.column,
      file: _maybeFrame.file,
      lineNumber: _maybeFrame.lineNumber,
      methodName: _maybeFrame.methodName
    });
  }

  return stack;
};

module.exports = YellowBoxSymbolication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveFN5bWJvbGljYXRpb24uanMiXSwibmFtZXMiOlsic3ltYm9saWNhdGVTdGFja1RyYWNlIiwicmVxdWlyZSIsImNhY2hlIiwiTWFwIiwiWWVsbG93Qm94U3ltYm9saWNhdGlvbiIsImRlbGV0ZSIsInN0YWNrIiwiZ2V0Q2FjaGVLZXkiLCJzeW1ib2xpY2F0ZSIsImtleSIsInByb21pc2UiLCJnZXQiLCJ0aGVuIiwic2FuaXRpemUiLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5IiwibWF5YmVTdGFjayIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwibWF5YmVGcmFtZSIsImNvbHVtbiIsImZpbGUiLCJsaW5lTnVtYmVyIiwibWV0aG9kTmFtZSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSxxQkFBcUIsR0FBR0MsT0FBTyw2Q0FBckM7O0FBUUEsSUFBTUMsS0FBb0MsR0FBRyxJQUFJQyxHQUFKLEVBQTdDO0FBRUEsSUFBTUMsc0JBQXNCLEdBQUc7QUFDN0JDLEVBQUFBLE1BRDZCLG1CQUN0QkMsS0FEc0IsRUFDRjtBQUN6QkosSUFBQUEsS0FBSyxDQUFDRyxNQUFOLENBQWFFLFdBQVcsQ0FBQ0QsS0FBRCxDQUF4QjtBQUNELEdBSDRCO0FBSzdCRSxFQUFBQSxXQUw2Qix1QkFLakJGLEtBTGlCLEVBS2E7QUFDeEMsUUFBTUcsR0FBRyxHQUFHRixXQUFXLENBQUNELEtBQUQsQ0FBdkI7QUFFQSxRQUFJSSxPQUFPLEdBQUdSLEtBQUssQ0FBQ1MsR0FBTixDQUFVRixHQUFWLENBQWQ7O0FBQ0EsUUFBSUMsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDbkJBLE1BQUFBLE9BQU8sR0FBR1YscUJBQXFCLENBQUNNLEtBQUQsQ0FBckIsQ0FBNkJNLElBQTdCLENBQWtDQyxRQUFsQyxDQUFWO0FBQ0FYLE1BQUFBLEtBQUssQ0FBQ1ksR0FBTixDQUFVTCxHQUFWLEVBQWVDLE9BQWY7QUFDRDs7QUFFRCxXQUFPQSxPQUFQO0FBQ0Q7QUFmNEIsQ0FBL0I7O0FBa0JBLElBQU1ILFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNELEtBQUQsRUFBNEI7QUFDOUMsU0FBT1MsSUFBSSxDQUFDQyxTQUFMLENBQWVWLEtBQWYsQ0FBUDtBQUNELENBRkQ7O0FBT0EsSUFBTU8sUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0ksVUFBRCxFQUE4QjtBQUM3QyxNQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixVQUFkLENBQUwsRUFBZ0M7QUFDOUIsVUFBTSxJQUFJRyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEOztBQUNELE1BQU1kLEtBQUssR0FBRyxFQUFkOztBQUNBLHVCQUF5QlcsVUFBekIsZ0tBQXFDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxRQUExQkksV0FBMEI7O0FBQ25DLFFBQUksT0FBT0EsV0FBUCxLQUFzQixRQUF0QixJQUFrQ0EsV0FBVSxJQUFJLElBQXBELEVBQTBEO0FBQ3hELFlBQU0sSUFBSUQsS0FBSixDQUFVLDRDQUFWLENBQU47QUFDRDs7QUFDRCxRQUFJLE9BQU9DLFdBQVUsQ0FBQ0MsTUFBbEIsS0FBNkIsUUFBN0IsSUFBeUNELFdBQVUsQ0FBQ0MsTUFBWCxJQUFxQixJQUFsRSxFQUF3RTtBQUN0RSxZQUFNLElBQUlGLEtBQUosQ0FBVSx3REFBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPQyxXQUFVLENBQUNFLElBQWxCLEtBQTJCLFFBQS9CLEVBQXlDO0FBQ3ZDLFlBQU0sSUFBSUgsS0FBSixDQUFVLDZDQUFWLENBQU47QUFDRDs7QUFDRCxRQUFJLE9BQU9DLFdBQVUsQ0FBQ0csVUFBbEIsS0FBaUMsUUFBckMsRUFBK0M7QUFDN0MsWUFBTSxJQUFJSixLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNEOztBQUNELFFBQUksT0FBT0MsV0FBVSxDQUFDSSxVQUFsQixLQUFpQyxRQUFyQyxFQUErQztBQUM3QyxZQUFNLElBQUlMLEtBQUosQ0FBVSxtREFBVixDQUFOO0FBQ0Q7O0FBQ0RkLElBQUFBLEtBQUssQ0FBQ29CLElBQU4sQ0FBVztBQUNUSixNQUFBQSxNQUFNLEVBQUVELFdBQVUsQ0FBQ0MsTUFEVjtBQUVUQyxNQUFBQSxJQUFJLEVBQUVGLFdBQVUsQ0FBQ0UsSUFGUjtBQUdUQyxNQUFBQSxVQUFVLEVBQUVILFdBQVUsQ0FBQ0csVUFIZDtBQUlUQyxNQUFBQSxVQUFVLEVBQUVKLFdBQVUsQ0FBQ0k7QUFKZCxLQUFYO0FBTUQ7O0FBQ0QsU0FBT25CLEtBQVA7QUFDRCxDQTdCRDs7QUErQkFxQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixzQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3ltYm9saWNhdGVTdGFja1RyYWNlID0gcmVxdWlyZSgnLi4vLi4vQ29yZS9EZXZ0b29scy9zeW1ib2xpY2F0ZVN0YWNrVHJhY2UnKTtcblxuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uLy4uL0NvcmUvRGV2dG9vbHMvcGFyc2VFcnJvclN0YWNrJztcblxudHlwZSBDYWNoZUtleSA9IHN0cmluZztcblxuZXhwb3J0IHR5cGUgU3RhY2sgPSBBcnJheTxTdGFja0ZyYW1lPjtcblxuY29uc3QgY2FjaGU6IE1hcDxDYWNoZUtleSwgUHJvbWlzZTxTdGFjaz4+ID0gbmV3IE1hcCgpO1xuXG5jb25zdCBZZWxsb3dCb3hTeW1ib2xpY2F0aW9uID0ge1xuICBkZWxldGUoc3RhY2s6IFN0YWNrKTogdm9pZCB7XG4gICAgY2FjaGUuZGVsZXRlKGdldENhY2hlS2V5KHN0YWNrKSk7XG4gIH0sXG5cbiAgc3ltYm9saWNhdGUoc3RhY2s6IFN0YWNrKTogUHJvbWlzZTxTdGFjaz4ge1xuICAgIGNvbnN0IGtleSA9IGdldENhY2hlS2V5KHN0YWNrKTtcblxuICAgIGxldCBwcm9taXNlID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKHByb21pc2UgPT0gbnVsbCkge1xuICAgICAgcHJvbWlzZSA9IHN5bWJvbGljYXRlU3RhY2tUcmFjZShzdGFjaykudGhlbihzYW5pdGl6ZSk7XG4gICAgICBjYWNoZS5zZXQoa2V5LCBwcm9taXNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfSxcbn07XG5cbmNvbnN0IGdldENhY2hlS2V5ID0gKHN0YWNrOiBTdGFjayk6IENhY2hlS2V5ID0+IHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YWNrKTtcbn07XG5cbi8qKlxuICogU2FuaXRpemUgYmVjYXVzZSBzb21ldGltZXMsIGBzeW1ib2xpY2F0ZVN0YWNrVHJhY2VgIGdpdmVzIHVzIGludmFsaWQgdmFsdWVzLlxuICovXG5jb25zdCBzYW5pdGl6ZSA9IChtYXliZVN0YWNrOiBtaXhlZCk6IFN0YWNrID0+IHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG1heWJlU3RhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzdGFjayB0byBiZSBhbiBhcnJheS4nKTtcbiAgfVxuICBjb25zdCBzdGFjayA9IFtdO1xuICBmb3IgKGNvbnN0IG1heWJlRnJhbWUgb2YgbWF5YmVTdGFjaykge1xuICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZSAhPT0gJ29iamVjdCcgfHwgbWF5YmVGcmFtZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVhY2ggc3RhY2sgZnJhbWUgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUuY29sdW1uICE9PSAnbnVtYmVyJyAmJiBtYXliZUZyYW1lLmNvbHVtbiAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN0YWNrIGZyYW1lIGBjb2x1bW5gIHRvIGJlIGEgbnVsbGFibGUgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUuZmlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYGZpbGVgIHRvIGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUubGluZU51bWJlciAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYGxpbmVOdW1iZXJgIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUubWV0aG9kTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYG1ldGhvZE5hbWVgIHRvIGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbiAgICBzdGFjay5wdXNoKHtcbiAgICAgIGNvbHVtbjogbWF5YmVGcmFtZS5jb2x1bW4sXG4gICAgICBmaWxlOiBtYXliZUZyYW1lLmZpbGUsXG4gICAgICBsaW5lTnVtYmVyOiBtYXliZUZyYW1lLmxpbmVOdW1iZXIsXG4gICAgICBtZXRob2ROYW1lOiBtYXliZUZyYW1lLm1ldGhvZE5hbWUsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YWNrO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hTeW1ib2xpY2F0aW9uO1xuIl19